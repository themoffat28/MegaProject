<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>280</x>
      <y>0</y>
      <w>160</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>ExampleClass
-
Data Members
-
Methods/Constructors

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>140</x>
      <y>70</y>
      <w>300</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>Timer
-
-excecutionTime : clock_t

-
+startTimer : void
+stopTimer : void
+resetTimer : void
+displayTimerInformation : void
+getExcecutionTimeInMiliseconds : long
+Timer() : constructor
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>440</x>
      <y>0</y>
      <w>360</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>IntNode
bg=blue
-
-nodeData : int
-nodePointer : IntNode*
-
+getNodeData() : int
+getNodePointer() : IntNode*
+setNodeData(int) : void
+setNodePointer(IntNode *) : void

+IntNode() : constructor
+IntNode(int) : constructor
+IntNode(int, IntNode*) : constructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>140</x>
      <y>0</y>
      <w>140</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Created by
Braeden Moffat
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>0</y>
      <w>280</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>IntNodeArray
bg=orange
-
- head : IntNode*
- size : int
-
+IntNodeArray(int) : constructor
+getSize() : int
+getFromIndex(int) : int
+setAtIndex(int index, int value) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1080</x>
      <y>0</y>
      <w>430</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Node &lt;Type&gt;
bg=magenta
-
-nodeData : Type
-nodePointer : Node&lt;Type&gt;
-
Constructors:
+Node&lt;Type&gt;() : constructor
+Node&lt;Type&gt;(Type value) : constructor
+Node&lt;Type&gt;(Type value, Node&lt;Type&gt;* next) : constructor

Accessors:
+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt;*
+ setNodeData(Type value) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>140</x>
      <y>230</y>
      <w>480</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
-
-front : Node&lt;Type&gt; *
-size : int
-
+Array() : default constructor
+Array&lt;Type&gt;(int size) : constructor

+~Array&lt;Type&gt;() : destructor
+Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+getSize() : int
+getFront() const : Node&lt;Type&gt;*

+getFromIndex(int index) : Type
+setAtIndex(int index, Type value) : void


bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>620</x>
      <y>230</y>
      <w>440</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
-
-size : int
-front : Node&lt;Type&gt; *
-
//Constructors
+List&lt;Type&gt;() : constructor
+List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

//Methods
+addAtIndex(int index, Type value) : void
+add(Type value) : void
+remove(int index) : Type
+setAtIndex(int index, Type data) : Type
+contains(Type data) : bool
+getSize() const : int
+getFront() const : int
+getFront() const : Node&lt;Type&gt; *
+getEnd() const : Node&lt;Type&gt; *
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>560</x>
      <y>230</y>
      <w>140</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>150</y>
      <w>320</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;120.0;300.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1060</x>
      <y>230</y>
      <w>490</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
-
-nodeData : Type
-nextPointer : BiDirectionalNode&lt;Type&gt; *
-previousPointer : BiDirectionalNode&lt;Type&gt; *
-
+BiDirectionalNode&lt;Type&gt;() : constructor
+BiDirectionalNode&lt;Type&gt;(Type value) : constructor
+BiDirectionalNode&lt;Type&gt;(Type value, Node&lt;Type&gt;* next, previous) : constructor

+getNodeData() : Type
+getNextNodePointer() : BiDirectionalNode&lt;Type&gt;*
+getPreviousNodePointer() : BiDirectionalNode&lt;Type&gt;*
+setNodeData(Type value) : void
+setNextNodePointer(BiDirectionalNode&lt;Type&gt; * next) : void
+setPreviousNodePointer(BiDirectionalNode&lt;Type&gt; * next) : void
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1420</x>
      <y>170</y>
      <w>30</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>140</x>
      <y>500</y>
      <w>480</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>/DoublyLinkedList&lt;Type&gt;/
-
-size : int
-front : BiDirectionalNode&lt;Type&gt; *
-end : BiDirectionalNode&lt;Type&gt; *
-
Non Virtual Methods:
+getSize() const : int
+getFront() const : BiDirectionalNode&lt;Type&gt; *
+getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual Methods:
+add(Type value)
+remove(int)
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>960</x>
      <y>230</y>
      <w>180</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>160.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>560</x>
      <y>340</y>
      <w>100</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;170.0;80.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>500</y>
      <w>360</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>Model :: Queue
-
-front : BiDirectionalNode&lt;Type&gt; *
-end : BiDirectionalNode&lt;Type&gt; *
-size : int
-
+Queue() : constructor
+~Queue() : Deconstructor

+add(Type data) : void
+remove(int index) : Type

+addAtIndex(int index, Type data)
bg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>700</y>
      <w>360</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Model :: Stack
-
-front : BiDirectionalNode&lt;Type&gt; *
-end : BiDirectionalNode&lt;Type&gt; *
-size : int
-
+Stack : constructor
+~Stack : Deconstructor

push(Type data) : void
pop() : Type
peek() : Type

+add(Type data) : void
+remove(int index) : Type
bg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>850</y>
      <w>360</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>Model :: CircularList
-
-front : BiDirectionalNode&lt;Type&gt; *
-end : BiDirectionalNode&lt;Type&gt; *
-size : int
-
+CircularList() : constructor
+~CircularList() : Deconstructor

+add(Type data) : void
+remove(int index) : Type

+addAtIndex(int index, Type data)
bg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>550</y>
      <w>110</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;150.0;50.0;150.0;50.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>690</y>
      <w>110</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>690</y>
      <w>170</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>110.0;10.0;150.0;10.0;150.0;130.0;10.0;130.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>850</y>
      <w>340</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
-
-front : BiDirectionalNode&lt;Type&gt; *
-end : BiDirectionalNode&lt;Type&gt; *
-size : int
-
+DoubleList() : constructor
+~DoubleList() : Deconstructor

+add(Type data) : void
+remove(int index) : Type

+addFront(Type data) : void
+addEnd(Type data) : void
+addAtIndex(int index, Type data)
+addFastIndex(int index, Type value) : void
bg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>160</x>
      <y>790</y>
      <w>260</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>240.0;10.0;240.0;30.0;10.0;30.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>390</x>
      <y>790</y>
      <w>170</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0;150.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1670</x>
      <y>320</y>
      <w>400</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>/Model :: Tree&lt;Type&gt;/
-
-size : int
-height : int
-complete : bool
-balanced : bool
-
+getSize() : int
+getHeight() : int
+isComplete() : bool
+isBalanced() : bool

+setSize(int size) : void
+setHeight(int height) : void
+setComplete(bool complete) : void
+setBalanced(bool balanced) : void

+inOrderTraversal() : void
+preOrderTraversal() : void
+postOrederTraversal() : void
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1100</x>
      <y>560</y>
      <w>470</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
-
-nodeData : Type(inherited)
-rootPointer : TreeNode&lt;Type&gt;*
-leftChildPointer : BinarySearchTreeNode&lt;Type&gt;*
-rightChildPointer : BinarySearchTreeNode&lt;Type&gt;*
-
+getRootPointer() : BinarySearchTreeNode&lt;Type&gt;*
+getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt;*
+getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt;*

+setRootChildPointer(BinarySearchTreeNode&lt;Type&gt;* root) : void
+setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt;* left) : void
+setRightChildPointer(BinarySearchTreeNode&lt;Type&gt;* right): void
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1630</x>
      <y>700</y>
      <w>460</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
-
-root : BinarySearchTreeNode&lt;Type&gt;*
-size : int (inherited)
-height : int (inherited)
-complete : bool (inherited)
-balanced : bool (inherited)
-
+BinarySearchTree() : constructor
+~BinarySearchTree() : destructor

+getRoot() : BinarySearchTreeNode&lt;Type&gt;*
+setRoot(BinarySearchTreeNode&lt;Type&gt;*root) : void

+calculateSize(BinarySearchTreeNode&lt;Type&gt;*) : int

+inOrderTraversal(BinarySearchTreeNode&lt;Type&gt;*) : void
+preOrderTraversal(BinarySearchTreeNode&lt;Type&gt;*) : void
+postOrederTraversal(BinarySearchTreeNode&lt;Type&gt;*) : void
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1850</x>
      <y>630</y>
      <w>30</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1560</x>
      <y>660</y>
      <w>90</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;40.0</additional_attributes>
  </element>
</diagram>
